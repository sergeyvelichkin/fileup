{"version":3,"sources":["components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","_useState","useState","_useState2","Object","slicedToArray","selectedFile","setSelectedFile","_useState3","_useState4","shortLink","setShortLink","_useState5","_useState6","uploading","setUploading","_useState7","_useState8","errFound","setErrFound","react_default","a","createElement","className","message","class","role","style","boxShadow","color","marginLeft","type","onChange","event","target","files","onClick","data","FormData","append","name","axios","post","headers","accept","Accept-Language","Content-Type","concat","_boundary","then","response","status","error","code","url","console","log","process","linkRequest","destination","domain","fullName","method","JSON","stringify","apikey","workspace","dataType","shortUrl","catch","err","urlShortener","location","href","App","components_Home","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9113a6c8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Home = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [shortLink, setShortLink] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n  const [errFound, setErrFound] = useState({});\n\n  // Making request to rebrandly to shorten URL that amazon S3 sent back to us\n  const urlShortener = (url) => {\n    console.log(\"ENV >>> \", process.env);\n    let linkRequest = {\n      destination: url,\n      domain: { fullName: \"rebrand.ly\" },\n    };\n\n    let requestHeaders = {\n      \"Content-Type\": \"application/json\",\n      apikey: \"212d576f073c418db5bb708cd0c65359\",\n      workspace: \"39b3836da6a94b7e87e00b1e27b391bb\",\n    };\n\n    axios({\n      url: \"https://api.rebrandly.com/v1/links\",\n      method: \"post\",\n      data: JSON.stringify(linkRequest),\n      headers: requestHeaders,\n      dataType: \"json\",\n    })\n      .then((response) => {\n        console.log(\n          `Long URL was ${response.data.destination}, short URL is ${response.data.shortUrl}`\n        );\n        setShortLink(response.data.shortUrl);\n      })\n      .catch((err) => {\n        setErrFound({ message: \"Api rebrandly log in problem\" });\n        console.log(err);\n      });\n  };\n\n  const singleFileUploadHandler = (event) => {\n    setUploading(true);\n    setErrFound({});\n    setShortLink(\"\");\n\n    const data = new FormData();\n    // If file selected\n    if (selectedFile) {\n      data.append(\"Image\", selectedFile, selectedFile.name);\n      axios\n        .post(\"/api/img-upload\", data, {\n          headers: {\n            accept: \"application/json\",\n            \"Accept-Language\": \"en-US,en;q=0.8\",\n            \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n          },\n        })\n        .then((response) => {\n          if (200 === response.status) {\n            // If file size is larger than expected.\n            if (response.data.error) {\n              if (\"LIMIT_FILE_SIZE\" === response.data.error.code) {\n                setUploading(false);\n                setErrFound({ message: \"Max Size is 10MB\" });\n                // ocShowAlert(\"Max size: 10MB\", \"red\");\n              } else {\n                setUploading(false);\n                // If not the given file type\n                setErrFound({ message: response.data.error });\n              }\n            } else {\n              // Success\n              let fileName = response.data;\n              urlShortener(fileName.location);\n              setUploading(false);\n              setSelectedFile(null);\n            }\n          }\n        })\n        .catch((error) => {\n          setUploading(false);\n          // If another error\n          setErrFound({ message: \"Server related problem\" });\n        });\n    } else {\n      setUploading(false);\n      // if file not selected throw error\n      setErrFound({ message: \"Plz select a file\" });\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      {errFound.message && (\n        <div class=\"alert alert-danger\" role=\"alert\">\n          {errFound.message}\n        </div>\n      )}\n\n      <div\n        className=\"card border-light mb-3 mt-5\"\n        style={{ boxShadow: \"0 5px 10px 2px rgba(195,192,192,.5)\" }}\n      >\n        <div className=\"card-header\">\n          <h3 style={{ color: \"#555\", marginLeft: \"12px\" }}>\n            Single Image Upload\n          </h3>\n          <p className=\"text-muted\" style={{ marginLeft: \"12px\" }}>\n            Upload Size:( Max 10MB )\n          </p>\n        </div>\n        <div className=\"card-body\">\n          <p className=\"card-text\">Please upload an image</p>\n          <input\n            type=\"file\"\n            onChange={(event) => {\n              setSelectedFile(event.target.files[0]);\n            }}\n          />\n          <div className=\"mt-5\">\n            <button className=\"btn btn-info\" onClick={singleFileUploadHandler}>\n              {uploading ? \"Uploading\" : \"Upload\"}\n            </button>\n          </div>\n        </div>\n      </div>\n      {shortLink && (\n        <div className=\"alert alert-success\" role=\"alert\">\n          File sucessfully uploaded and is available here\n          <a href={\"https://\" + shortLink}> {shortLink}</a>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}